#Step 1a: Units -> Quantity
#Step 1b: promo_percentage -> promotion
library(data.table)
setnames(move, old = "units", new = "quantity", skip_absent=TRUE)
setnames(move, old = "promo_percentage", new = "promotion", skip_absent=TRUE)
#Step 2: Identifying 'own' (Prilosec) vs. 'comp' (non-Prilosec)
move$brand_name = ifelse(move$brand_code_uc == selected_brand, "own", "comp")
colnames(move)
#Step 3: Aggregating the data for each store/observation
#For 'comp'
move <- move[, .(
quantity = sum(quantity, na.rm = TRUE),      # Sum quantities
price = mean(price, na.rm = TRUE),           # Mean price
promotion = mean(promotion, na.rm = TRUE)    # Mean promotion
), by = .(store_code_uc, week_end, brand_name)]
#Merge stores_dma w/move
#Can you check this one because I only see one dma value when I merge both together
move = merge(move, stores_dma, by = "store_code_uc", all = FALSE)
print(move)
set.seed(444)
DT = data.table(dma  = rep(LETTERS[1:2], each = 5),
week = 1:5,
x    = round(runif(10, min = 0, max =20)))
DT = DT[-c(2, 5, 9)]
DT
setkey(DT, dma, week)
DT = DT[CJ(c("A", "B"), 1:5)]
DT
DT[is.na(DT)] = -111
DT
brands    = unique(adv_DT$brand_code_uc)
dma_codes = unique(adv_DT$dma_code)
weeks     = seq(from = min(adv_DT$week_end), to = max(adv_DT$week_end), by = "week")
#Perfoming Cross Join (Double Check)
library(data.table)
setDT(adv_DT)
complete_set = CJ(brand_code_uc = brands, dma_code = dma_codes, week_end = weeks)
filled_DT = complete_set[adv_DT, on = .(brand_code_uc, dma_code, week_end)]
filled_DT[is.na(filled_DT)] = 0
print(filled_DT)
#Locating own and comps within advertising datatable...
selected_brand  = 621727
adv_DT[, brand_name := ifelse(adv_DT$brand_code_uc == selected_brand, "own", "comp")]
adv_DT <- adv_DT[, .(
grp_direct = sum(grp_direct, na.rm = TRUE),      # Sum of direct GRPs
grp_indirect = sum(grp_indirect, na.rm = TRUE)   # Sum of indirect GRPs
), by = .(dma_code, week_end, brand_name)]
#Direct & Indirect GRPs
adv_DT$grp = adv_DT$grp_direct + adv_DT$grp_indirect
N_lags = 52
delta  = 0.7
geom_weights = cumprod(c(1.0, rep(delta, times = N_lags)))
geom_weights = sort(geom_weights)
tail(geom_weights)
adv_DT[, grp := grp_direct + grp_indirect]
setkey(adv_DT, brand_name, dma_code, week_end)
adv_DT[, adstock := roll_sum(log(1 + grp),
n = N_lags + 1,
weights = geom_weights,
normalize = FALSE,
align = "right", fill = NA),
by = .(brand_name, dma_code)]
weightedSum <- function(x, w) {
T = length(x)
L = length(w) - 1
y = rep_len(NA, T)
for (i in (L+1):T) y[i] = sum(x[(i-L):i]*w)
return(y)
}
time_a = system.time(adv_DT[, stock_a := weightedSum(log(1+grp), geom_weights),
by = .(brand_name, dma_code)])
time_b = system.time(adv_DT[, stock_b := roll_sum(log(1+grp), n = N_lags+1,
weights = geom_weights,
normalize = FALSE,
align = "right",  fill = NA),
by = .(brand_name, dma_code)])
(time_a/time_b)[3]
head(move)
adv_DT[, stock_a := NULL]
adv_DT[, stock_b := NULL]
move <- merge(move, adv_DT, by = c("brand_name", "dma_code", "week_end"))
head(move)
wide_data <- dcast(move, dma_code + store_code_uc + week_end ~ brand_name, value.var = c("quantity", "price", "promotion", "adstock"))
wide_data <- wide_data[complete.cases(wide_data), ]
wide_data[, week_end := as.Date(week_end, format = "%Y-%m-%d")]
wide_data[, month_index := 12 * (as.integer(format(week_end, "%Y")) - 2011) + as.integer(format(week_end, "%m"))]
head(wide_data[, .(week_end, month_index)]) #sanity check
chosen_code = 506
move_filtered <- move[dma_code == chosen_code]
head(move_filtered)
# Aggregate grp by week_end and brand
move_filtered <- move_filtered[, .(
grp = mean(grp, na.rm = TRUE)
), by = .(week_end, brand_name)]
library(ggplot2)
# Create the facet plot
facet_labels <- c("own" = "Own GRP Over Time", "comp" = "Competitor GRP Over Time")
ggplot(move_filtered, aes(x = week_end, y = grp)) +
geom_line(color = "blue") +
facet_wrap(~ brand_name, ncol = 1, scales = "free_y",
labeller = labeller(brand_name = facet_labels)) +
labs(
title = paste("Weekly GRP for DMA", chosen_code),
x = "Week End",
y = "GRP"
) +
theme_minimal()
mean_grp_dma_brand <- move[, .(mean_grp = mean(grp, na.rm = TRUE)), by = .(dma_code, brand_name)]
# Step 2: Merge the mean back into the 'move' data table and calculate 'normalized_grp'
move <- merge(move, mean_grp_dma_brand, by = c("dma_code", "brand_name"), all.x = TRUE)
move[, normalized_grp := 100 * grp / mean_grp]
facet_labels <- c("own" = "Own GRP Ratio by DMA", "comp" = "Competitor GRP Ratio by DMA")
# Set limits to exclude outliers
lower_limit <- 0
upper_limit <- 300
# Plot the histogram using 'move' without modifying it
ggplot(move, aes(x = normalized_grp)) +
geom_histogram(binwidth = 10, fill = "green", color = "black", alpha = 0.7, boundary = 0) +
facet_wrap(~ brand_name, ncol = 1, scales = "free_y",
labeller = as_labeller(facet_labels)) +
scale_x_continuous(limits = c(lower_limit, upper_limit)) +  # Or use coord_cartesian()
labs(
title = "Histogram of Normalized GRP by Brand (Limited Range)",
x = "Normalized GRP (%)",
y = "Frequency"
) +
theme_minimal()
library(fixest)
basic_model <- feols(
log(1 + quantity_own) ~ log(price_own) + log(price_comp) + promotion_own + promotion_comp |
store_code_uc + month_index,
data = wide_data
)
model_with_adstock <- feols(
log(1 + quantity_own) ~ log(price_own) + log(price_comp) + promotion_own + promotion_comp + adstock_own + adstock_comp |
store_code_uc + month_index,
data = wide_data
)
model_with_adstock_no_time <- feols(
log(1 + quantity_own) ~ log(price_own) + log(price_comp) + promotion_own + promotion_comp + adstock_own + adstock_comp |
store_code_uc,
data = wide_data
)
etable(basic_model, model_with_adstock, model_with_adstock_no_time)
View(model_with_adstock_no_time)
View(model_with_adstock)
#Perfoming Cross Join (Double Check)
library(data.table)
setDT(adv_DT)
complete_set = CJ(brand_code_uc = brands, dma_code = dma_codes, week_end = weeks)
adv_DT = complete_set[adv_DT, on = .(brand_code_uc, dma_code, week_end)]
knitr::opts_chunk$set(echo = TRUE, comment = NA, message = FALSE,
fig.width = 4.5, fig.height = 3, fig.align = "right")
library(bit64)
library(data.table)
library(RcppRoll)
library(ggplot2)
library(fixest)
library(knitr)
data_folder = "data"
brands = load(paste0(data_folder, "/Brands_a3.RData"))
selected_module = 8412
selected_brand  = 621727
brands = load(paste0(data_folder, "/Brands_a3.RData"))
stores = load(paste0(data_folder, "/stores_dma.RData"))
move_data = load(paste0(data_folder, "/move_8412.RData"))
advertising_data = load(paste0(data_folder, "/adv_8412.RData"))
#Step 1: Renaming (use set names)
#Step 1a: Units -> Quantity
#Step 1b: promo_percentage -> promotion
library(data.table)
setnames(move, old = "units", new = "quantity", skip_absent=TRUE)
setnames(move, old = "promo_percentage", new = "promotion", skip_absent=TRUE)
#Step 2: Identifying 'own' (Prilosec) vs. 'comp' (non-Prilosec)
move$brand_name = ifelse(move$brand_code_uc == selected_brand, "own", "comp")
colnames(move)
#Step 3: Aggregating the data for each store/observation
#For 'comp'
move <- move[, .(
quantity = sum(quantity, na.rm = TRUE),      # Sum quantities
price = mean(price, na.rm = TRUE),           # Mean price
promotion = mean(promotion, na.rm = TRUE)    # Mean promotion
), by = .(store_code_uc, week_end, brand_name)]
#Merge stores_dma w/move
#Can you check this one because I only see one dma value when I merge both together
move = merge(move, stores_dma, by = "store_code_uc", all = FALSE)
print(move)
set.seed(444)
DT = data.table(dma  = rep(LETTERS[1:2], each = 5),
week = 1:5,
x    = round(runif(10, min = 0, max =20)))
DT = DT[-c(2, 5, 9)]
DT
setkey(DT, dma, week)
DT = DT[CJ(c("A", "B"), 1:5)]
DT
DT[is.na(DT)] = -111
DT
brands    = unique(adv_DT$brand_code_uc)
dma_codes = unique(adv_DT$dma_code)
weeks     = seq(from = min(adv_DT$week_end), to = max(adv_DT$week_end), by = "week")
#Perfoming Cross Join (Double Check)
library(data.table)
setDT(adv_DT)
complete_set = CJ(brand_code_uc = brands, dma_code = dma_codes, week_end = weeks)
adv_DT = complete_set[adv_DT, on = .(brand_code_uc, dma_code, week_end)]
adv_DT[is.na(adv_DT)] = 0
print(adv_DT)
#Locating own and comps within advertising datatable...
selected_brand  = 621727
adv_DT[, brand_name := ifelse(adv_DT$brand_code_uc == selected_brand, "own", "comp")]
adv_DT <- adv_DT[, .(
grp_direct = sum(grp_direct, na.rm = TRUE),      # Sum of direct GRPs
grp_indirect = sum(grp_indirect, na.rm = TRUE)   # Sum of indirect GRPs
), by = .(dma_code, week_end, brand_name)]
#Direct & Indirect GRPs
adv_DT$grp = adv_DT$grp_direct + adv_DT$grp_indirect
N_lags = 52
delta  = 0.7
geom_weights = cumprod(c(1.0, rep(delta, times = N_lags)))
geom_weights = sort(geom_weights)
tail(geom_weights)
adv_DT[, grp := grp_direct + grp_indirect]
setkey(adv_DT, brand_name, dma_code, week_end)
adv_DT[, adstock := roll_sum(log(1 + grp),
n = N_lags + 1,
weights = geom_weights,
normalize = FALSE,
align = "right", fill = NA),
by = .(brand_name, dma_code)]
weightedSum <- function(x, w) {
T = length(x)
L = length(w) - 1
y = rep_len(NA, T)
for (i in (L+1):T) y[i] = sum(x[(i-L):i]*w)
return(y)
}
time_a = system.time(adv_DT[, stock_a := weightedSum(log(1+grp), geom_weights),
by = .(brand_name, dma_code)])
time_b = system.time(adv_DT[, stock_b := roll_sum(log(1+grp), n = N_lags+1,
weights = geom_weights,
normalize = FALSE,
align = "right",  fill = NA),
by = .(brand_name, dma_code)])
(time_a/time_b)[3]
head(move)
adv_DT[, stock_a := NULL]
adv_DT[, stock_b := NULL]
move <- merge(move, adv_DT, by = c("brand_name", "dma_code", "week_end"))
head(move)
wide_data <- dcast(move, dma_code + store_code_uc + week_end ~ brand_name, value.var = c("quantity", "price", "promotion", "adstock"))
wide_data <- wide_data[complete.cases(wide_data), ]
wide_data[, week_end := as.Date(week_end, format = "%Y-%m-%d")]
wide_data[, month_index := 12 * (as.integer(format(week_end, "%Y")) - 2011) + as.integer(format(week_end, "%m"))]
head(wide_data[, .(week_end, month_index)]) #sanity check
chosen_code = 506
move_filtered <- move[dma_code == chosen_code]
head(move_filtered)
# Aggregate grp by week_end and brand
move_filtered <- move_filtered[, .(
grp = mean(grp, na.rm = TRUE)
), by = .(week_end, brand_name)]
library(ggplot2)
# Create the facet plot
facet_labels <- c("own" = "Own GRP Over Time", "comp" = "Competitor GRP Over Time")
ggplot(move_filtered, aes(x = week_end, y = grp)) +
geom_line(color = "blue") +
facet_wrap(~ brand_name, ncol = 1, scales = "free_y",
labeller = labeller(brand_name = facet_labels)) +
labs(
title = paste("Weekly GRP for DMA", chosen_code),
x = "Week End",
y = "GRP"
) +
theme_minimal()
mean_grp_dma_brand <- move[, .(mean_grp = mean(grp, na.rm = TRUE)), by = .(dma_code, brand_name)]
# Step 2: Merge the mean back into the 'move' data table and calculate 'normalized_grp'
move <- merge(move, mean_grp_dma_brand, by = c("dma_code", "brand_name"), all.x = TRUE)
move[, normalized_grp := 100 * grp / mean_grp]
facet_labels <- c("own" = "Own GRP Ratio by DMA", "comp" = "Competitor GRP Ratio by DMA")
# Set limits to exclude outliers
lower_limit <- 0
upper_limit <- 300
# Plot the histogram using 'move' without modifying it
ggplot(move, aes(x = normalized_grp)) +
geom_histogram(binwidth = 10, fill = "green", color = "black", alpha = 0.7, boundary = 0) +
facet_wrap(~ brand_name, ncol = 1, scales = "free_y",
labeller = as_labeller(facet_labels)) +
scale_x_continuous(limits = c(lower_limit, upper_limit)) +  # Or use coord_cartesian()
labs(
title = "Histogram of Normalized GRP by Brand (Limited Range)",
x = "Normalized GRP (%)",
y = "Frequency"
) +
theme_minimal()
library(fixest)
basic_model <- feols(
log(1 + quantity_own) ~ log(price_own) + log(price_comp) + promotion_own + promotion_comp |
store_code_uc + month_index,
data = wide_data
)
model_with_adstock <- feols(
log(1 + quantity_own) ~ log(price_own) + log(price_comp) + promotion_own + promotion_comp + adstock_own + adstock_comp |
store_code_uc + month_index,
data = wide_data
)
model_with_adstock_no_time <- feols(
log(1 + quantity_own) ~ log(price_own) + log(price_comp) + promotion_own + promotion_comp + adstock_own + adstock_comp |
store_code_uc,
data = wide_data
)
etable(basic_model, model_with_adstock, model_with_adstock_no_time)
knitr::opts_chunk$set(echo = TRUE, comment = NA, message = FALSE,
fig.width = 4.5, fig.height = 3, fig.align = "right")
library(bit64)
library(data.table)
library(RcppRoll)
library(ggplot2)
library(fixest)
library(knitr)
data_folder = "data"
brands = load(paste0(data_folder, "/Brands_a3.RData"))
selected_module = 8412
selected_brand  = 621727
brands = load(paste0(data_folder, "/Brands_a3.RData"))
stores = load(paste0(data_folder, "/stores_dma.RData"))
move_data = load(paste0(data_folder, "/move_8412.RData"))
advertising_data = load(paste0(data_folder, "/adv_8412.RData"))
#Step 1: Renaming (use set names)
#Step 1a: Units -> Quantity
#Step 1b: promo_percentage -> promotion
library(data.table)
setnames(move, old = "units", new = "quantity", skip_absent=TRUE)
setnames(move, old = "promo_percentage", new = "promotion", skip_absent=TRUE)
#Step 2: Identifying 'own' (Prilosec) vs. 'comp' (non-Prilosec)
move$brand_name = ifelse(move$brand_code_uc == selected_brand, "own", "comp")
colnames(move)
#Step 3: Aggregating the data for each store/observation
#For 'comp'
move <- move[, .(
quantity = sum(quantity, na.rm = TRUE),      # Sum quantities
price = mean(price, na.rm = TRUE),           # Mean price
promotion = mean(promotion, na.rm = TRUE)    # Mean promotion
), by = .(store_code_uc, week_end, brand_name)]
#Merge stores_dma w/move
#Can you check this one because I only see one dma value when I merge both together
move = merge(move, stores_dma, by = "store_code_uc")
print(move)
set.seed(444)
DT = data.table(dma  = rep(LETTERS[1:2], each = 5),
week = 1:5,
x    = round(runif(10, min = 0, max =20)))
DT = DT[-c(2, 5, 9)]
DT
setkey(DT, dma, week)
DT = DT[CJ(c("A", "B"), 1:5)]
DT
DT[is.na(DT)] = -111
DT
brands    = unique(adv_DT$brand_code_uc)
dma_codes = unique(adv_DT$dma_code)
weeks     = seq(from = min(adv_DT$week_end), to = max(adv_DT$week_end), by = "week")
#Perfoming Cross Join (Double Check)
library(data.table)
setDT(adv_DT)
complete_set = CJ(brand_code_uc = brands, dma_code = dma_codes, week_end = weeks)
adv_DT = complete_set[adv_DT, on = .(brand_code_uc, dma_code, week_end)]
adv_DT[is.na(adv_DT)] = 0
#Locating own and comps within advertising datatable...
selected_brand  = 621727
adv_DT[, brand_name := ifelse(adv_DT$brand_code_uc == selected_brand, "own", "comp")]
adv_DT <- adv_DT[, .(
grp_direct = sum(grp_direct, na.rm = TRUE),      # Sum of direct GRPs
grp_indirect = sum(grp_indirect, na.rm = TRUE)   # Sum of indirect GRPs
), by = .(dma_code, week_end, brand_name)]
#Direct & Indirect GRPs
adv_DT$grp = adv_DT$grp_direct + adv_DT$grp_indirect
N_lags = 52
delta  = 0.7
geom_weights = cumprod(c(1.0, rep(delta, times = N_lags)))
geom_weights = sort(geom_weights)
tail(geom_weights)
adv_DT[, grp := grp_direct + grp_indirect]
setkey(adv_DT, brand_name, dma_code, week_end)
adv_DT[, adstock := roll_sum(log(1 + grp),
n = N_lags + 1,
weights = geom_weights,
normalize = FALSE,
align = "right", fill = NA),
by = .(brand_name, dma_code)]
weightedSum <- function(x, w) {
T = length(x)
L = length(w) - 1
y = rep_len(NA, T)
for (i in (L+1):T) y[i] = sum(x[(i-L):i]*w)
return(y)
}
time_a = system.time(adv_DT[, stock_a := weightedSum(log(1+grp), geom_weights),
by = .(brand_name, dma_code)])
time_b = system.time(adv_DT[, stock_b := roll_sum(log(1+grp), n = N_lags+1,
weights = geom_weights,
normalize = FALSE,
align = "right",  fill = NA),
by = .(brand_name, dma_code)])
(time_a/time_b)[3]
head(move)
adv_DT[, stock_a := NULL]
adv_DT[, stock_b := NULL]
move <- merge(move, adv_DT, by = c("brand_name", "dma_code", "week_end"))
head(move)
wide_data <- dcast(move, dma_code + store_code_uc + week_end ~ brand_name, value.var = c("quantity", "price", "promotion", "adstock"))
wide_data <- wide_data[complete.cases(wide_data), ]
wide_data[, week_end := as.Date(week_end, format = "%Y-%m-%d")]
wide_data[, month_index := 12 * (as.integer(format(week_end, "%Y")) - 2011) + as.integer(format(week_end, "%m"))]
head(wide_data[, .(week_end, month_index)]) #sanity check
chosen_code = 506
move_filtered <- move[dma_code == chosen_code]
head(move_filtered)
# Aggregate grp by week_end and brand
move_filtered <- move_filtered[, .(
grp = mean(grp, na.rm = TRUE)
), by = .(week_end, brand_name)]
library(ggplot2)
# Create the facet plot
facet_labels <- c("own" = "Own GRP Over Time", "comp" = "Competitor GRP Over Time")
ggplot(move_filtered, aes(x = week_end, y = grp)) +
geom_line(color = "blue") +
facet_wrap(~ brand_name, ncol = 1, scales = "free_y",
labeller = labeller(brand_name = facet_labels)) +
labs(
title = paste("Weekly GRP for DMA", chosen_code),
x = "Week End",
y = "GRP"
) +
theme_minimal()
mean_grp_dma_brand <- move[, .(mean_grp = mean(grp, na.rm = TRUE)), by = .(dma_code, brand_name)]
# Step 2: Merge the mean back into the 'move' data table and calculate 'normalized_grp'
move <- merge(move, mean_grp_dma_brand, by = c("dma_code", "brand_name"), all.x = TRUE)
move[, normalized_grp := 100 * grp / mean_grp]
facet_labels <- c("own" = "Own GRP Ratio by DMA", "comp" = "Competitor GRP Ratio by DMA")
# Set limits to exclude outliers
lower_limit <- 0
upper_limit <- 300
# Plot the histogram using 'move' without modifying it
ggplot(move, aes(x = normalized_grp)) +
geom_histogram(binwidth = 10, fill = "green", color = "black", alpha = 0.7, boundary = 0) +
facet_wrap(~ brand_name, ncol = 1, scales = "free_y",
labeller = as_labeller(facet_labels)) +
scale_x_continuous(limits = c(lower_limit, upper_limit)) +  # Or use coord_cartesian()
labs(
title = "Histogram of Normalized GRP by Brand (Limited Range)",
x = "Normalized GRP (%)",
y = "Frequency"
) +
theme_minimal()
head(wide_data)
library(fixest)
basic_model <- feols(
log(1 + quantity_own) ~ log(price_own) + log(price_comp) + promotion_own + promotion_comp |
store_code_uc + month_index,
data = wide_data
)
model_with_adstock <- feols(
log(1 + quantity_own) ~ log(price_own) + log(price_comp) + promotion_own + promotion_comp + adstock_own + adstock_comp |
store_code_uc + month_index,
data = wide_data
)
model_with_adstock_no_time <- feols(
log(1 + quantity_own) ~ log(price_own) + log(price_comp) + promotion_own + promotion_comp + adstock_own + adstock_comp |
store_code_uc,
data = wide_data
)
etable(basic_model, model_with_adstock, model_with_adstock_no_time)
library(fixest)
basic_model <- feols(
log(1 + quantity_own) ~ log(price_own) + log(price_comp) + promotion_own + promotion_comp |
store_code_uc + month_index,
data = wide_data
)
model_with_adstock <- feols(
log(1 + quantity_own) ~ log(price_own) + log(price_comp) + promotion_own + promotion_comp + adstock_own + adstock_comp |
store_code_uc + month_index,
data = wide_data
)
model_with_adstock_no_time <- feols(
log(1 + quantity_own) ~ log(price_own) + log(price_comp) + promotion_own + promotion_comp + adstock_own + adstock_comp |
store_code_uc,
data = wide_data
)
basic_model2 <- feols(
log(1 + quantity_own) ~ log(price_own) + log(price_comp) + promotion_own + promotion_comp |
store_code_uc,
data = wide_data
)
etable(basic_model, model_with_adstock, model_with_adstock_no_time, basic_model2)
library(fixest)
basic_model <- feols(
log(1 + quantity_own) ~ log(price_own) + log(price_comp) + promotion_own + promotion_comp |
store_code_uc + month_index,
data = wide_data
)
model_with_adstock <- feols(
log(1 + quantity_own) ~ log(price_own) + log(price_comp) + promotion_own + promotion_comp + adstock_own + adstock_comp |
store_code_uc + month_index,
data = wide_data
)
model_with_adstock_no_time <- feols(
log(1 + quantity_own) ~ log(price_own) + log(price_comp) + promotion_own + promotion_comp + adstock_own + adstock_comp |
store_code_uc,
data = wide_data
)
etable(basic_model, model_with_adstock, model_with_adstock_no_time)
